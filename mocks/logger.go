// Code generated by MockGen. DO NOT EDIT.
// Source: logger.go

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockLogger is a mock of Logger interface
type MockLogger struct {
	ctrl     *gomock.Controller
	recorder *MockLoggerMockRecorder
}

// MockLoggerMockRecorder is the mock recorder for MockLogger
type MockLoggerMockRecorder struct {
	mock *MockLogger
}

// NewMockLogger creates a new mock instance
func NewMockLogger(ctrl *gomock.Controller) *MockLogger {
	mock := &MockLogger{ctrl: ctrl}
	mock.recorder = &MockLoggerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLogger) EXPECT() *MockLoggerMockRecorder {
	return m.recorder
}

// Info mocks base method
func (m *MockLogger) Info(format string, args ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{format}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Info", varargs...)
}

// Info indicates an expected call of Info
func (mr *MockLoggerMockRecorder) Info(format interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{format}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*MockLogger)(nil).Info), varargs...)
}

// Success mocks base method
func (m *MockLogger) Success(pattern string, args ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{pattern}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Success", varargs...)
}

// Success indicates an expected call of Success
func (mr *MockLoggerMockRecorder) Success(pattern interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{pattern}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Success", reflect.TypeOf((*MockLogger)(nil).Success), varargs...)
}

// Warning mocks base method
func (m *MockLogger) Warning(pattern string, args ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{pattern}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Warning", varargs...)
}

// Warning indicates an expected call of Warning
func (mr *MockLoggerMockRecorder) Warning(pattern interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{pattern}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Warning", reflect.TypeOf((*MockLogger)(nil).Warning), varargs...)
}

// Error mocks base method
func (m *MockLogger) Error(pattern string, args ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{pattern}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Error", varargs...)
}

// Error indicates an expected call of Error
func (mr *MockLoggerMockRecorder) Error(pattern interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{pattern}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockLogger)(nil).Error), varargs...)
}

// Errorf mocks base method
func (m *MockLogger) Errorf(pattern string, args ...interface{}) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{pattern}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Errorf", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Errorf indicates an expected call of Errorf
func (mr *MockLoggerMockRecorder) Errorf(pattern interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{pattern}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Errorf", reflect.TypeOf((*MockLogger)(nil).Errorf), varargs...)
}

// Fatal mocks base method
func (m *MockLogger) Fatal(pattern string, args ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{pattern}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Fatal", varargs...)
}

// Fatal indicates an expected call of Fatal
func (mr *MockLoggerMockRecorder) Fatal(pattern interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{pattern}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fatal", reflect.TypeOf((*MockLogger)(nil).Fatal), varargs...)
}

// EnableColor mocks base method
func (m *MockLogger) EnableColor() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "EnableColor")
}

// EnableColor indicates an expected call of EnableColor
func (mr *MockLoggerMockRecorder) EnableColor() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableColor", reflect.TypeOf((*MockLogger)(nil).EnableColor))
}

// DisableColor mocks base method
func (m *MockLogger) DisableColor() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DisableColor")
}

// DisableColor indicates an expected call of DisableColor
func (mr *MockLoggerMockRecorder) DisableColor() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisableColor", reflect.TypeOf((*MockLogger)(nil).DisableColor))
}
